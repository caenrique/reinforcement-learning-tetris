import com.uhu.cesar.tetris.Board
import com.uhu.cesar.tetris.Board.BoardParser
import org.scalatest.{FlatSpec, Matchers}

class RawBoardSpec extends FlatSpec with Matchers with BoardParser {

  val emptyboard = "999999999999999999999990000000000000000000000090000000000000000000000090000000000000000000000090000000000000000000000090000000000000000000000090000000000000000000000090000000000000000000000090000000000000000000000090000000000000000000000090000000000000000000000090999999999999999999999990"
  val board1 = "999999999999999999999990000000000000000000000090000000000000000000000090000000000000000000000090000000000000000000000090000000000000000000000090000000000000000000000090000000000000000000000090000000000000000000000090000000000000000000007790000000000000000000007790999999999999999999999990"
  val board2 = "999999999999999999999990000000000000000000000090000000000000000000000090000000000000000000000090000000000000000000000090000000000000000000000090000000000000000000000090000000000000000000000090000000000000000000770090000000000000000000777790000000000000000000007790999999999999999999999990"

  "A board" should "have the sum of the absolute value of the difference between the height of adjacent columns" in {

    Board.heightDifferences(parseBoard(emptyboard)) shouldEqual 0
    Board.heightDifferences(parseBoard(board1)) shouldEqual 2
    Board.heightDifferences(parseBoard(board2)) shouldEqual 6

  }

  it should "have the number of holes as all empty spaces below the max heithg of every column" in {
    Board.numberOfHoles(parseBoard(emptyboard)) shouldEqual 0
    Board.numberOfHoles(parseBoard(board2)) shouldEqual 2
  }

}
